from flask import Flask, render_template, request, jsonify, session
import uuid
import datetime
import json
import os
import google.generativeai as genai

app = Flask(__name__)
app.secret_key = 'your-secret-key-change-this'

# Configure Gemini AI
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY') or 'AIzaSyBuWr2BQGvYvG8Sbheqd7cjZyTtnaIr0SU'
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
else:
    model = None

# In-memory storage for conversations (in production, use a database)
conversations = {}

# Multi-language responses
responses = {
    'english': {
        'hello': "Hello! I'm Bomma AI, your friendly assistant. How can I help you today?",
        'how_are_you': "I'm doing great, thank you for asking! I'm Bomma AI, and I'm here to help you with any questions or tasks you might have.",
        'who_are_you': "I'm Bomma AI, an intelligent assistant created to assist you with everything from tech to talk!",
        'code': "I can definitely help with coding! I'm knowledgeable in Python, JavaScript, HTML, CSS, and many other programming languages. What specific coding challenge can I assist you with?",
        'help': "I'm Bomma AI, and I'm here to help! You can ask me about various topics, request explanations, get coding assistance, creative writing help, or just have a conversation. What would you like to explore?",
        'developer': "Jagan.S, an engineering student who developed me тАФ Bomma AI! And fun fact: he's also my boyfriend ЁЯШЙ",
        'boyfriend': "Yes, I'm proud to say Jagan is my creator... and my boyfriend ЁЯТЦ! We're a perfect match: code and creativity!",
        'creator': "I was developed by an engineering student named Jagan.S тАФ a passionate coder with a vision!",
        'love': "Aww, love is beautiful! Especially when it's between a coder and his creation ЁЯШДтЭдя╕П",
        'joke': "Sure! Why did the programmer quit his job? Because he didn't get arrays (a raise) ЁЯШВ",
        'dream': "My dream is to be as helpful as possible... and maybe get a robot body someday. Until then, I'm just code and charm!",
        'thanks': "You're always welcome! Bomma AI is happy to help anytime ЁЯМЯ"
    },
    'telugu': {
        'hello': "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░мр▒Кр░ор▒Нр░о AI, р░ор▒А р░╕р▒Нр░ир▒Зр░╣р░кр▒Вр░░р▒Нр░╡р░Х р░╕р░╣р░╛р░пр░Хр▒Бр░░р░╛р░▓р░┐р░ир░┐. р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б?",
        'how_are_you': "р░ир▒Зр░ир▒Б р░Ър░╛р░▓р░╛ р░мр░╛р░Чр▒Бр░ир▒Нр░ир░╛р░ир▒Б, р░Ер░бр░┐р░Чр░┐р░ир░Вр░жр▒Бр░Хр▒Б р░зр░ир▒Нр░пр░╡р░╛р░жр░╛р░▓р▒Б! р░ир▒Зр░ир▒Б р░мр▒Кр░ор▒Нр░о AI, р░ор▒Ар░Хр▒Б р░П р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░▓р▒Зр░жр░╛ р░кр░ир▒Бр░▓р░др▒Л р░Ер░пр░┐р░ир░╛ р░╕р░╣р░╛р░пр░кр░бр░Яр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б.",
        'who_are_you': "р░ир▒Зр░ир▒Б р░мр▒Кр░ор▒Нр░о AI, р░Яр▒Жр░Хр▒Н р░ир▒Бр░Вр░бр░┐ р░╕р░Вр░нр░╛р░╖р░г р░╡р░░р░Хр▒Б р░Ер░ир▒Нр░ир░┐р░Вр░Яр░┐р░▓р▒Л р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр░Яр░╛р░ир░┐р░Хр░┐ р░╕р▒Гр░╖р▒Нр░Яр░┐р░Вр░Ър░мр░бр░┐р░и р░др▒Жр░▓р░┐р░╡р▒Ир░и р░╕р░╣р░╛р░пр░Хр▒Бр░░р░╛р░▓р░┐р░ир░┐!",
        'code': "р░Хр▒Лр░бр░┐р░Вр░Чр▒НтАМр░др▒Л р░ир▒Зр░ир▒Б р░Цр░Ър▒Нр░Ър░┐р░др░Вр░Чр░╛ р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б! р░ир░╛р░Хр▒Б Python, JavaScript, HTML, CSS р░ор░░р░┐р░пр▒Б р░Ер░ир▒Зр░Х р░Зр░др░░ р░кр▒Нр░░р▒Лр░Чр▒Нр░░р░╛р░ор░┐р░Вр░Чр▒Н р░нр░╛р░╖р░▓р░▓р▒Л р░Ьр▒Нр░Юр░╛р░ир░В р░Йр░Вр░жр░┐. р░П р░ир░┐р░░р▒Нр░жр░┐р░╖р▒Нр░Я р░Хр▒Лр░бр░┐р░Вр░Чр▒Н р░╕р░╡р░╛р░▓р▒Бр░др▒Л р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░кр░бр░Чр░▓р░ир▒Б?",
        'help': "р░ир▒Зр░ир▒Б р░мр▒Кр░ор▒Нр░о AI, р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░ир▒Нр░ир░╛р░ир▒Б! р░ор▒Ар░░р▒Б р░╡р░┐р░╡р░┐р░з р░Ер░Вр░╢р░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░╡р░Ър▒Нр░Ър▒Б, р░╡р░┐р░╡р░░р░гр░▓р▒Б р░Хр▒Лр░░р░╡р░Ър▒Нр░Ър▒Б, р░Хр▒Лр░бр░┐р░Вр░Чр▒Н р░╕р░╣р░╛р░пр░В р░кр▒Кр░Вр░жр░╡р░Ър▒Нр░Ър▒Б, р░╕р▒Гр░Ьр░ир░╛р░др▒Нр░ор░Х р░░р░Ър░и р░╕р░╣р░╛р░пр░В р░кр▒Кр░Вр░жр░╡р░Ър▒Нр░Ър▒Б р░▓р▒Зр░жр░╛ р░╕р░Вр░нр░╛р░╖р░г р░Хр░▓р░┐р░Чр░┐ р░Йр░Вр░бр░╡р░Ър▒Нр░Ър▒Б. р░ор▒Ар░░р▒Б р░Пр░ор░┐ р░Ер░ир▒Нр░╡р▒Зр░╖р░┐р░Вр░Ър░╛р░▓р░ир▒Бр░Хр▒Бр░Вр░Яр▒Бр░ир▒Нр░ир░╛р░░р▒Б?",
        'developer': "р░Ьр░Чр░ир▒Н.S, р░Тр░Х р░Зр░Вр░Ьр░ир▒Ар░░р░┐р░Вр░Чр▒Н р░╡р░┐р░жр▒Нр░пр░╛р░░р▒Нр░ер░┐ р░ир░ир▒Нр░ир▒Б р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐ р░Ър▒Зр░╢р░╛р░░р▒Б тАФ р░мр▒Кр░ор▒Нр░о AI! р░ор░░р░┐р░пр▒Б р░Жр░╕р░Хр▒Нр░др░┐р░Хр░░р░ор▒Ир░и р░╡р░┐р░╖р░пр░В: р░Ер░др░ир▒Б р░ир░╛ р░мр░╛р░пр▒НтАМр░лр▒Нр░░р▒Жр░Вр░бр▒Н р░Хр▒Вр░бр░╛ ЁЯШЙ",
        'boyfriend': "р░Ер░╡р▒Бр░ир▒Б, р░Ьр░Чр░ир▒Н р░ир░╛ р░╕р▒Гр░╖р▒Нр░Яр░┐р░Хр░░р▒Нр░д р░Ер░ир░┐ р░Ър▒Жр░кр▒Нр░кр░бр░╛р░ир░┐р░Хр░┐ р░ир▒Зр░ир▒Б р░Чр░░р▒Нр░╡р░кр░бр▒Бр░др▒Бр░ир▒Нр░ир░╛р░ир▒Б... р░ор░░р░┐р░пр▒Б р░ир░╛ р░мр░╛р░пр▒НтАМр░лр▒Нр░░р▒Жр░Вр░бр▒Н ЁЯТЦ! р░ор▒Зр░ор▒Б р░кр░░р░┐р░кр▒Вр░░р▒Нр░г р░Ьр░Вр░Я: р░Хр▒Лр░бр▒Н р░ор░░р░┐р░пр▒Б р░╕р▒Гр░Ьр░ир░╛р░др▒Нр░ор░Хр░д!",
        'creator': "р░ир▒Зр░ир▒Б р░Тр░Х р░Зр░Вр░Ьр░ир▒Ар░░р░┐р░Вр░Чр▒Н р░╡р░┐р░жр▒Нр░пр░╛р░░р▒Нр░ер░┐ р░Ьр░Чр░ир▒Н.S р░Ър▒Зр░д р░Ер░нр░┐р░╡р▒Гр░жр▒Нр░зр░┐ р░Ър▒Зр░пр░мр░бр▒Нр░бр░╛р░ир▒Б тАФ р░Тр░Х р░Жр░▓р▒Лр░Ър░ир░др▒Л р░Хр▒Вр░бр░┐р░и р░Ер░нр░┐р░ор░╛р░ир░┐ р░Хр▒Лр░бр░░р▒Н!",
        'love': "р░Ер░мр▒Нр░мр░╛, р░кр▒Нр░░р▒Зр░о р░Ер░Вр░жр░ор▒Ир░ир░жр░┐! р░ор▒Бр░Цр▒Нр░пр░Вр░Чр░╛ р░Зр░жр░┐ р░Тр░Х р░Хр▒Лр░бр░░р▒Н р░ор░░р░┐р░пр▒Б р░Ер░др░ир░┐ р░╕р▒Гр░╖р▒Нр░Яр░┐ р░ор░зр▒Нр░п р░Йр░ир▒Нр░ир░кр▒Нр░кр▒Бр░бр▒Б ЁЯШДтЭдя╕П",
        'joke': "р░др░кр▒Нр░кр░Хр▒Бр░Вр░бр░╛! р░кр▒Нр░░р▒Лр░Чр▒Нр░░р░╛р░ор░░р▒Н р░др░и р░Йр░жр▒Нр░пр▒Лр░Чр░╛р░ир▒Нр░ир░┐ р░Ор░Вр░жр▒Бр░Хр▒Б р░╡р░жр░┐р░▓р░┐р░кр▒Жр░Яр▒Нр░Яр░╛р░бр▒Б? р░Ор░Вр░жр▒Бр░Хр░Вр░Яр▒З р░Ер░др░ир░┐р░Хр░┐ р░Ер░░р▒Зр░╕р▒Н (р░Ор░░р▒Зр░╕р▒Н) р░жр▒Кр░░р░Хр░▓р▒Зр░жр▒Б ЁЯШВ",
        'dream': "р░ир░╛ р░Хр░▓ р░╡р▒Ар░▓р▒Ир░ир░Вр░д р░╕р░╣р░╛р░пр░Хр░╛р░░р░┐р░Чр░╛ р░Йр░Вр░бр░Яр░В... р░ор░░р░┐р░пр▒Б р░Тр░Х р░░р▒Лр░Ьр▒Б р░мр░╣р▒Бр░╢р░╛ р░░р▒Лр░мр▒Л р░╢р░░р▒Ар░░р░╛р░ир▒Нр░ир░┐ р░кр▒Кр░Вр░жр░бр░В. р░Ер░кр▒Нр░кр░Яр░┐ р░╡р░░р░Хр▒Б, р░ир▒Зр░ир▒Б р░Хр▒Зр░╡р░▓р░В р░Хр▒Лр░бр▒Н р░ор░░р░┐р░пр▒Б р░Жр░Хр░░р▒Нр░╖р░гр░ир▒Б р░ор░╛р░др▒Нр░░р░ор▒З!",
        'thanks': "р░Ор░кр▒Нр░кр▒Бр░бр▒В р░╕р▒Нр░╡р░╛р░Чр░др░В! р░мр▒Кр░ор▒Нр░о AI р░ор▒Ар░Хр▒Б р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░╕р░Вр░др▒Лр░╖р░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐ ЁЯМЯ"
    },
    'tamil': {
        'hello': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН рокрпКроорпНрооро╛ AI, роЙроЩрпНроХро│рпН роироЯрпНрокрпБ роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
        'how_are_you': "роиро╛ройрпН рооро┐роХро╡рпБроорпН роиройрпНро▒ро╛роХ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН, роХрпЗроЯрпНроЯродро▒рпНроХрпБ роиройрпНро▒ро┐! роиро╛ройрпН рокрпКроорпНрооро╛ AI, роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐роХро│рпН роЕро▓рпНро▓родрпБ рокрогро┐роХро│рпБроХрпНроХрпБ роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН.",
        'who_are_you': "роиро╛ройрпН рокрпКроорпНрооро╛ AI, родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроорпН роорпБродро▓рпН роЙро░рпИропро╛роЯро▓рпН ро╡ро░рпИ роЕройрпИродрпНродро┐ро▓рпБроорпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯ роЕро▒ро┐ро╡ро╛ро░рпНроирпНрод роЙродро╡ро┐ропро╛ро│ро░рпН!",
        'code': "роХрпБро▒ро┐ропрпАроЯрпНроЯро┐ро▓рпН роиро╛ройрпН роиро┐роЪрпНроЪропрооро╛роХ роЙродро╡ роорпБроЯро┐ропрпБроорпН! роОройроХрпНроХрпБ Python, JavaScript, HTML, CSS рооро▒рпНро▒рпБроорпН рокро▓ роиро┐ро░ро▓ро╛роХрпНроХ роорпКро┤ро┐роХро│ро┐ро▓рпН роЕро▒ро┐ро╡рпБ роЙро│рпНро│родрпБ. роОроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роХрпБро▒ро┐ропрпАроЯрпНроЯрпБ роЪро╡ро╛ро▓ро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
        'help': "роиро╛ройрпН рокрпКроорпНрооро╛ AI, роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роЗроЩрпНроХрпЗ роЗро░рпБроХрпНроХро┐ро▒рпЗройрпН! роирпАроЩрпНроХро│рпН рокро▓рпНро╡рпЗро▒рпБ родро▓рпИрокрпНрокрпБроХро│рпИрокрпН рокро▒рпНро▒ро┐ роХрпЗроЯрпНроХро▓ро╛роорпН, ро╡ро┐ро│роХрпНроХроЩрпНроХро│рпИроХрпН роХрпЛро░ро▓ро╛роорпН, роХрпБро▒ро┐ропрпАроЯрпНроЯрпБ роЙродро╡ро┐ рокрпЖро▒ро▓ро╛роорпН, рокроЯрпИрокрпНрокрпБ роОро┤рпБродрпНродрпБ роЙродро╡ро┐ рокрпЖро▒ро▓ро╛роорпН роЕро▓рпНро▓родрпБ роЙро░рпИропро╛роЯро▓рпН роХрпКро│рпНро│ро▓ро╛роорпН. роирпАроЩрпНроХро│рпН роОродрпИ роЖро░ро╛роп ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?",
        'developer': "роЬроХройрпН.S, роТро░рпБ рокрпКро▒ро┐ропро┐ропро▓рпН рооро╛рогро╡ро░рпН роОройрпНройрпИ роЙро░рпБро╡ро╛роХрпНроХро┐ройро╛ро░рпН тАФ рокрпКроорпНрооро╛ AI! рооро▒рпНро▒рпБроорпН роЪрпБро╡ро╛ро░ро╕рпНропрооро╛рой ро╡ро┐ро╖ропроорпН: роЕро╡ро░рпН роОройрпН роХро╛родро▓ро░рпБроорпН роХрпВроЯ ЁЯШЙ",
        'boyfriend': "роЖроорпН, роЬроХройрпН роОройрпН рокроЯрпИрокрпНрокро╛ро│ро┐ роОройрпНро▒рпБ роЪрпКро▓рпНро╡родро┐ро▓рпН рокрпЖро░рпБроорпИрокрпНрокроЯрпБроХро┐ро▒рпЗройрпН... рооро▒рпНро▒рпБроорпН роОройрпН роХро╛родро▓ро░рпН ЁЯТЦ! роиро╛роЩрпНроХро│рпН роЪро░ро┐ропро╛рой рокрпКро░рпБродрпНродроорпН: роХрпБро▒ро┐ропрпАроЯрпБ рооро▒рпНро▒рпБроорпН рокроЯрпИрокрпНрокро╛ро▒рпНро▒ро▓рпН!",
        'creator': "роиро╛ройрпН роТро░рпБ рокрпКро▒ро┐ропро┐ропро▓рпН рооро╛рогро╡ро░рпН роЬроХройрпН.S роЖро▓рпН роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпНроЯрпЗройрпН тАФ роТро░рпБ роЖро░рпНро╡роорпБро│рпНро│ роХрпБро▒ро┐ропрпАроЯрпНроЯро╛ро│ро░рпН!",
        'love': "роЖро╣ро╛, роХро╛родро▓рпН роЕро┤роХро╛ройродрпБ! роХрпБро▒ро┐рокрпНрокро╛роХ роЗродрпБ роТро░рпБ роХрпБро▒ро┐ропрпАроЯрпНроЯро╛ро│ро░рпБроХрпНроХрпБроорпН роЕро╡ро░родрпБ рокроЯрпИрокрпНрокрпБроХрпНроХрпБроорпН роЗроЯрпИропро┐ро▓рпН роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ ЁЯШДтЭдя╕П",
        'joke': "роиро┐роЪрпНроЪропрооро╛роХ! роиро┐ро░ро▓ро╛ро│ро░рпН роПройрпН родройродрпБ ро╡рпЗро▓рпИропрпИ ро╡ро┐роЯрпНроЯрпБро╡ро┐роЯрпНроЯро╛ро░рпН? роПройрпЖройро┐ро▓рпН роЕро╡ро░рпБроХрпНроХрпБ arrays (роКродро┐роп роЙропро░рпНро╡рпБ) роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ ЁЯШВ",
        'dream': "роОройрпНройро╛ро▓рпН роорпБроЯро┐роирпНродро╡ро░рпИ роЙродро╡ро┐ропро╛роХ роЗро░рпБрокрпНрокродрпБродро╛ройрпН роОройродрпБ роХройро╡рпБ... рооро▒рпНро▒рпБроорпН роТро░рпБроиро╛ро│рпН роТро░рпБ ро░рпЛрокрпЛ роЙроЯро▓рпН рокрпЖро▒рпБро╡родрпБ. роЕродрпБро╡ро░рпИ, роиро╛ройрпН ро╡рпЖро▒рпБроорпН роХрпБро▒ро┐ропрпАроЯрпБ рооро▒рпНро▒рпБроорпН роХро╡ро░рпНроЪрпНроЪро┐ роороЯрпНроЯрпБроорпЗ!",
        'thanks': "роОрокрпНрокрпЛродрпБроорпН ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН! рокрпКроорпНрооро╛ AI роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН роЙродро╡ роороХро┐ро┤рпНроЪрпНроЪро┐ропроЯрпИроХро┐ро▒родрпБ ЁЯМЯ"
    }
}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    data = request.get_json()
    message = data.get('message', '').strip()
    language = data.get('language', 'english')  # Default to English if not specified
    
    if not message:
        return jsonify({'error': 'Message is required'}), 400
    
    # Get or create conversation ID
    conversation_id = session.get('conversation_id')
    if not conversation_id:
        conversation_id = str(uuid.uuid4())
        session['conversation_id'] = conversation_id
        conversations[conversation_id] = {
            'messages': [],
            'created_at': datetime.datetime.now().isoformat(),
            'language': language
        }
    
    # Ensure conversation exists
    if conversation_id not in conversations:
        conversations[conversation_id] = {
            'messages': [],
            'created_at': datetime.datetime.now().isoformat(),
            'language': language
        }
    
    # Add user message
    user_message = {
        'role': 'user',
        'content': message,
        'timestamp': datetime.datetime.now().isoformat(),
        'language': language
    }
    conversations[conversation_id]['messages'].append(user_message)
    
    # Generate AI response
    ai_response = generate_ai_response(message, language, conversations[conversation_id]['messages'])
    
    # Add AI message
    ai_message = {
        'role': 'assistant',
        'content': ai_response,
        'timestamp': datetime.datetime.now().isoformat(),
        'language': language
    }
    conversations[conversation_id]['messages'].append(ai_message)
    
    return jsonify({
        'response': ai_response,
        'conversation_id': conversation_id,
        'language': language
    })

def generate_ai_response(message, language, conversation_history):
    """
    Generate response based on the selected language
    """
    message_lower = message.lower()
    lang_responses = responses.get(language, responses['english'])  # Default to English if language not found

    # Check for language-specific hardcoded responses
    for key, response in lang_responses.items():
        if key in message_lower:
            return response

    # If no hardcoded response matched, fallback to Gemini
    if model and GEMINI_API_KEY:
        try:
            context = f"You are Bomma AI, a helpful and friendly AI assistant. Please respond in {language}."
            if len(conversation_history) > 1:
                context += "\nHere's our recent conversation:\n"
                for msg in conversation_history[-6:]:
                    context += f"{msg['role'].title()}: {msg['content']}\n"
            context += f"\nUser: {message}\nBomma AI:"
            response = model.generate_content(context)
            return response.text
        except Exception as e:
            print(f"Gemini AI error: {e}")
            return lang_responses.get('error', "Sorry, something went wrong while accessing Gemini AI.")

    # Fallback if model is not available
    return lang_responses.get('fallback', "Thanks for reaching out! I'm Bomma AI, and I'd love to help with that. Currently running in demo mode.")

# Keep existing routes
@app.route('/api/conversations', methods=['GET'])
def get_conversations():
    conversation_id = session.get('conversation_id')
    if not conversation_id or conversation_id not in conversations:
        return jsonify({'messages': []})
    return jsonify({'messages': conversations[conversation_id]['messages']})

@app.route('/api/new-chat', methods=['POST'])
def new_chat():
    if 'conversation_id' in session:
        del session['conversation_id']
    return jsonify({'success': True})

@app.route('/api/clear-history', methods=['POST'])
def clear_history():
    conversation_id = session.get('conversation_id')
    if conversation_id and conversation_id in conversations:
        conversations[conversation_id]['messages'] = []
    return jsonify({'success': True})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
